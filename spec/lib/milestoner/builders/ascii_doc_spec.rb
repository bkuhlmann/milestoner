# frozen_string_literal: true

require "dry/monads"
require "spec_helper"

RSpec.describe Milestoner::Builders::ASCIIDoc do
  include Dry::Monads[:result]

  using Refinements::Pathname

  subject(:builder) { described_class.new tagger: }

  include_context "with application dependencies"
  include_context "with enriched tag"

  let(:tagger) { instance_double Milestoner::Commits::Tagger, call: Success(tags) }

  describe "#call" do
    let(:content) { path.read }
    let(:path) { temp_dir.join "index.adoc" }

    context "with single tag" do
      before { settings.build_max = 1 }

      it "includes logo, label, version, and date" do
        settings.project_uri_logo = "https://acme.io/logo.png"

        builder.call

        expect(content).to include(
          "= pass:[ ]image:https://acme.io/logo.png[Logo,50,50]pass:[ ]" \
          "link:https://undefined.io/projects/test[Test] 1.2.3 (2024-07-04)"
        )
      end

      it "doesn't include logo when not present" do
        settings.project_uri_logo = nil
        builder.call

        expect(content).not_to match(/logo.png/)
      end

      it "renders owner" do
        builder.call

        expect(content).to include(
          "image:https://avatars.githubusercontent.com/u/1[Malcolm Reynolds,24,24] " \
          "link:https://github.com/mal[Malcolm Reynolds]"
        )
      end

      it "doesn't render owner when tags have no commits" do
        tags.each { |tag| tag.commits.clear }
        builder.call

        expect(content).not_to include("Malcolm Reynolds")
      end

      it "renders valid when signature exists" do
        builder.call
        expect(content).to include("ðŸ”’ Tag (valid)")
      end

      it "renders invalid when signature doesn't exist" do
        tag.signature = nil
        builder.call

        expect(content).to include("ðŸ”“ Tag (invalid)")
      end

      it "renders commits with stats" do
        builder.call

        expect(content).to include(<<~BODY)
          * ðŸŸ¢ Added documentation - link:https://github.com/zoe[Zoe Washburne]

          *1 commit. 2 files. 10 deletions. 5 insertions.*
        BODY
      end

      it "includes generator" do
        builder.call

        expect(content).to include(
          "_Generated by link:https://alchemists.io/projects/milestoner[Milestoner 3.2.1]._"
        )
      end

      it "renders zero stats with no commits" do
        allow(tagger).to receive(:call).and_return(
          Success([Milestoner::Models::Tag[commits: [], version: "0.0.0"]])
        )

        builder.call

        expect(content).to include("*0 commits. 0 files. 0 deletions. 0 insertions.*")
      end

      it "builds custom path" do
        settings.build_basename = "test"
        builder.call

        expect(temp_dir.join("test.adoc").exist?).to be(true)
      end

      it "logs path when success" do
        builder.call
        expect(logger.reread).to match(/ðŸŸ¢.+Built: #{path}\./)
      end

      it "answers build root when success" do
        expect(builder.call).to eq(Success(temp_dir))
      end
    end

    context "with multiple tags" do
      before { settings.build_max = 2 }

      it "builds versioned indexes" do
        builder.call

        expect(temp_dir.files("**/*")).to contain_exactly(
          temp_dir.join("0.0.0/index.adoc"),
          temp_dir.join("0.1.0/index.adoc")
        )
      end

      it "logs paths" do
        builder.call

        expect(logger.reread).to match(
          /
           ðŸŸ¢.+Built:\s#{temp_dir.join "0.1.0/index.adoc"}\..+
           ðŸŸ¢.+Built:\s#{temp_dir.join "0.0.0/index.adoc"}\.
          /mx
        )
      end

      it "answers root path when success" do
        expect(builder.call).to eq(Success(temp_dir))
      end
    end

    context "with failure" do
      before { allow(tagger).to receive(:call).and_return(Failure("Danger!")) }

      it "logs error" do
        builder.call
        expect(logger.reread).to match(/ðŸ›‘.+Danger!/)
      end

      it "answers message" do
        expect(builder.call).to eq(Failure("Danger!"))
      end
    end
  end
end
