# frozen_string_literal: true

require "dry/monads"
require "spec_helper"

RSpec.describe Milestoner::Builders::Feed do
  include Dry::Monads[:result]

  using Refinements::Pathname

  subject(:builder) { described_class.new }

  include_context "with application dependencies"
  include_context "with Git repository"

  describe "#call" do
    let(:feed) { RSS::Parser.parse content }
    let(:content) { path.read }
    let(:path) { temp_dir.join "index.xml" }

    before do
      cache.write :users do |table|
        table.create Milestoner::Models::User[external_id: 1, handle: "test", name: "Test User"]
      end
    end

    it "renders logo when present" do
      settings.project_uri_logo = "https://acme.io/logo.png"

      git_repo_dir.change_dir do
        `git tag 0.0.0`
        `touch a.txt && git add --all && git commit --message "Added A"`

        builder.call
        expect(content).to include("https://acme.io/logo.png")
      end
    end

    it "doesn't render logo when not present" do
      git_repo_dir.change_dir do
        `git tag 0.0.0`
        `touch a.txt && git add --all && git commit --message "Added A"`

        builder.call
        expect(content).not_to include("logo")
      end
    end

    it "renders avatar" do
      git_repo_dir.change_dir do
        `git tag 0.0.0`
        `touch a.txt && git add --all && git commit --message "Added A"`

        builder.call
        expect(content).to include("missing.png")
      end
    end

    it "renders invalid signature" do
      git_repo_dir.change_dir do
        `git tag 0.0.0`
        `touch a.txt && git add --all && git commit --message "Added A"`

        builder.call
        expect(content).to include("ðŸ”“ Tag (invalid)")
      end
    end

    it "renders stats" do
      git_repo_dir.change_dir do
        `git tag 0.0.0`
        `touch a.txt && git add --all && git commit --message "Added A"`

        builder.call
        expect(content).to match(/1 commit.+1 file.+0 deletions.+0 insertions/m)
      end
    end

    it "renders generator" do
      git_repo_dir.change_dir do
        `git tag 0.0.0`
        `touch a.txt && git add --all && git commit --message "Added A"`

        builder.call
        expect(content).to include("Generated by")
      end
    end

    it "logs path when success" do
      git_repo_dir.change_dir do
        `git tag 0.0.0`
        `touch a.txt && git add --all && git commit --message "Added A"`

        builder.call
        expect(logger.reread).to match(/ðŸŸ¢.+Built: #{path}\./)
      end
    end

    it "answers root path when success" do
      git_repo_dir.change_dir do
        `git tag 0.0.0`
        `touch a.txt && git add --all && git commit --message "Added A"`

        expect(builder.call).to eq(Success(temp_dir))
      end
    end

    it "logs error when syndication builder fails" do
      temp_dir.change_dir do
        builder.call
        expect(logger.reread).to match(/ðŸ›‘.+Required variables/)
      end
    end
  end
end
