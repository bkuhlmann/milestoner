# frozen_string_literal: true

require "dry/monads"
require "spec_helper"

RSpec.describe Milestoner::Builders::Web do
  include Dry::Monads[:result]

  using Refinements::Pathname
  using Refinements::Struct

  subject(:builder) { described_class.new tagger: }

  include_context "with application dependencies"
  include_context "with enriched tag"

  let(:tagger) { instance_double Milestoner::Commits::Tagger, call: Success(tags) }

  let(:css_path) { temp_dir.join "page.css" }

  describe "#call" do
    context "with single tag" do
      let(:html_path) { temp_dir.join "index.html" }

      before { settings.build_max = 1 }

      it "includes title" do
        builder.call
        expect(html_path.read).to include("<title>Test 1.2.3</title>")
      end

      it "includes description meta" do
        builder.call
        expect(html_path.read).to include(%(<meta name="description" content="A test.">))
      end

      it "includes author meta" do
        builder.call
        expect(html_path.read).to include(%(<meta name="author" content="Tester">))
      end

      it "includes generator meta" do
        builder.call
        expect(html_path.read).to include(%(<meta name="generator" content="Milestoner 3.2.1">))
      end

      it "includes stylesheet when enabled" do
        builder.call
        expect(html_path.read).to include(%(href="page.css"))
      end

      it "excludes stylesheet when disabled" do
        settings.build_stylesheet = false
        builder.call

        expect(html_path.read).not_to include(%(rel="stylesheet"))
      end

      it "includes logo when present" do
        builder.call

        expect(html_path.read).to include(
          %(<img src="https://undefined.io/assets/media/projects/milestoner/logo.png" ) +
          %(alt="Logo" width="30" height="30">)
        )
      end

      it "doesn't include logo when not present" do
        settings.project_uri_logo = nil
        builder.call

        expect(html_path.read).not_to include(
          %(<img src="https://undefined.io/assets/media/projects/milestoner/logo.png" ) +
          %(alt="Logo" width="30" height="30">)
        )
      end

      it "renders owner" do
        builder.call
        expect(html_path.read).to include(%(<div class="owner">))
      end

      it "doesn't render owner when tags have no commits" do
        tags.each { |tag| tag.commits.clear }
        builder.call

        expect(html_path.read).not_to include(%(<div class="owner">))
      end

      it "renders valid when signature exists" do
        builder.call
        expect(html_path.read).to include("Tag (valid)")
      end

      it "renders invalid when signature doesn't exist" do
        tag.signature = nil
        builder.call

        expect(html_path.read).to include("Tag (invalid)")
      end

      it "includes generator link" do
        builder.call
        url = "https://alchemists.io/projects/milestoner"

        expect(html_path.read).to include(
          %(Generated by <a href="#{url}" class="link">Milestoner 3.2.1</a>)
        )
      end

      it "renders zero stats with no commits" do
        allow(tagger).to receive(:call).and_return(
          Success([Milestoner::Models::Tag[commits: [], version: "0.0.0"]])
        )

        builder.call

        expect(html_path.read).to match(/0\scommits.+0\sfiles.+0\sdeletions.+0\sinsertions/m)
      end

      it "builds default HTML and CSS" do
        builder.call
        expect(temp_dir.files("**/*")).to contain_exactly(html_path, css_path)
      end

      it "builds custom HTML and CSS" do
        settings.build_basename = "test"
        settings.build_stylesheet = "test"
        builder.call

        expect(temp_dir.files("**/*")).to contain_exactly(
          temp_dir.join("test.html"),
          temp_dir.join("test.css")
        )
      end

      it "builds only HTML when stylesheet is disabled" do
        settings.build_stylesheet = false
        builder.call

        expect(temp_dir.files("**/*")).to contain_exactly(html_path)
      end

      it "ignores relative path when building CSS file" do
        settings.build_stylesheet = "../page"
        builder.call

        expect(temp_dir.files).to contain_exactly(
          temp_dir.join("index.html"),
          temp_dir.join("page.css")
        )
      end

      it "logs paths when success" do
        builder.call

        expect(logger.reread).to match(
          /
           游릭.+Built:\s#{temp_dir.join "page.css"}\..+
           游릭.+Built:\s#{html_path}\.
          /mx
        )
      end

      it "answers root path when success" do
        expect(builder.call).to eq(Success(temp_dir))
      end
    end

    context "with multiple tags" do
      let(:html_path) { temp_dir.join "index.html" }

      before { settings.build_max = 2 }

      it "builds versioned indexes" do
        builder.call

        expect(temp_dir.files("**/*")).to contain_exactly(
          temp_dir.join("0.0.0/index.html"),
          temp_dir.join("0.1.0/index.html"),
          css_path
        )
      end

      it "logs paths" do
        builder.call

        expect(logger.reread).to match(
          /
           游릭.+Built:\s#{temp_dir.join "page.css"}\..+
           游릭.+Built:\s#{temp_dir.join "0.1.0/index.html"}\..+
           游릭.+Built:\s#{temp_dir.join "0.0.0/index.html"}\.
          /mx
        )
      end

      it "answers root path when success" do
        expect(builder.call).to eq(Success(temp_dir))
      end
    end

    context "with failure" do
      before { allow(tagger).to receive(:call).and_return(Failure("Danger!")) }

      it "logs error" do
        builder.call
        expect(logger.reread).to match(/游띔.+Danger!/)
      end

      it "answers message" do
        expect(builder.call).to eq(Failure("Danger!"))
      end
    end
  end
end
