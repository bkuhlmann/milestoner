# frozen_string_literal: true

require "spec_helper"

RSpec.describe Milestoner::Tags::Creator do
  using Refinements::Pathname
  using Refinements::Struct

  subject(:creator) { described_class.new }

  include_context "with Git repository"
  include_context "with application dependencies"

  let(:tag) { Milestoner::Container[:git].tag_show(version).value_or nil }
  let(:version) { "1.2.3" }

  describe "#call" do
    before do
      git_repo_dir.change_dir do
        `(git tag --delete #{version} && git push --delete origin #{version}) 2> /dev/null`
      end
    end

    it "creates tag when success" do
      git_repo_dir.change_dir do
        creator.call version

        expect(tag).to have_attributes(
          subject: "Version 1.2.3",
          version: "1.2.3",
          body: "Generated by Milestoner 3.2.1.\n\n\n",
          trailers: [
            Gitt::Models::Trailer[key: "Commits", value: "1"],
            Gitt::Models::Trailer[key: "Deletions", value: "0"],
            Gitt::Models::Trailer[key: "Duration", value: "0"],
            Gitt::Models::Trailer[key: "Files", value: "1"],
            Gitt::Models::Trailer[key: "Insertions", value: "0"],
            Gitt::Models::Trailer[
              key: "URI",
              value: "https://undefined.io/projects/test/versions/1.2.3"
            ]
          ]
        )
      end
    end

    it "creates tag with custom subject" do
      git_repo_dir.change_dir do
        settings.tag_subject = "Test"
        creator.call version

        expect(tag).to have_attributes(subject: "Test", version: "1.2.3")
      end
    end

    it "answers version when success" do
      git_repo_dir.change_dir { expect(creator.call(version)).to be_success(version) }
    end

    context "with commits since last tag" do
      before do
        git_repo_dir.change_dir do
          `rm -f README.md`
          `git commit --all --message "Removed README"`

          `printf "Update." > README.md`
          `git add . && git commit --all --message "Updated README"`

          `printf "Fix." > README.md`
          `git commit --all --message "Fixed README"`
        end
      end

      it "creates tag message with commits since last tag" do
        git_repo_dir.change_dir do
          creator.call version

          expect(tag).to have_attributes(
            subject: "Version 1.2.3",
            version: "1.2.3",
            body: "Generated by Milestoner 3.2.1.\n\n\n"
          )
        end
      end
    end

    it "logs warning when local tag exists" do
      git_repo_dir.change_dir do
        `git tag #{version}`
        creator.call version

        expect(logger.reread).to match(/⚠️.+Local tag exists: 1.2.3. Skipped./)
      end
    end

    it "answers success with version when local tag exists" do
      git_repo_dir.change_dir do
        `git tag #{version}`
        expect(creator.call(version)).to be_success(version)
      end
    end

    it "answers failure when commits don't exist" do
      temp_dir.change_dir do
        `git init`

        expect(creator.call(version)).to be_failure(
          "Your current branch 'main' does not have any commits yet."
        )
      end
    end
  end
end
